/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist;

import java.util.List;
import java.util.Map.Entry;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.ui.editor.hover.IEObjectHover;
import org.xtext.example.mydsl.MyDslRuntimeModule;
import org.xtext.example.mydsl.resources.MyDslEObjectDescription;
import org.xtext.example.mydsl.scoping.PackageSelector;

import com.google.common.base.Function;
import com.google.inject.Inject;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class MyDslProposalProvider extends AbstractMyDslProposalProvider {
	private PackageSelector packageSelector;

	public MyDslProposalProvider() {
		packageSelector = new PackageSelector();
	}
	
	public ReferenceProposalCreator getCrossReferenceProposalCreator() {
		return super.getCrossReferenceProposalCreator();
	}
	
	@Override
	protected Function<IEObjectDescription, ICompletionProposal> getProposalFactory(final String ruleName,
			final ContentAssistContext contentAssistContext) {

		return new org.eclipse.xtext.ui.editor.contentassist.AbstractJavaBasedContentProposalProvider.DefaultProposalCreator(contentAssistContext, ruleName, getQualifiedNameConverter()) {
			
			@Inject
			private IEObjectHover hover;
			
			@Override
			public ICompletionProposal apply(IEObjectDescription candidate) {
				if (candidate == null)
					return null;
				ICompletionProposal result = null;
				String proposal = getQualifiedNameConverter().toString(candidate.getName());
				if (ruleName != null) {
					try {
						proposal = getValueConverter().toString(proposal, ruleName);
					} catch (ValueConverterException e) {
						return null;
					}
				}
				EObject objectOrProxy = candidate.getEObjectOrProxy();
				StyledString displayString = getStyledDisplayString(candidate);
				Image image = getImage(objectOrProxy);
				result = createCompletionProposal(proposal, displayString, image, contentAssistContext);
				if (result instanceof ConfigurableCompletionProposal) {
					((ConfigurableCompletionProposal) result).setAdditionalProposalInfo(objectOrProxy);
					((ConfigurableCompletionProposal) result).setHover(hover);
				}
				getPriorityHelper().adjustCrossReferencePriority(result, contentAssistContext.getPrefix());
				return result;
			}
			
			protected StyledString getStyledDisplayString(IEObjectDescription description) {
				return getStyledDisplayString(description.getEObjectOrProxy(),
						description.getUserData(MyDslEObjectDescription.PACKAGE_KEY) + "." + description.getQualifiedName(),
						description.getUserData(MyDslEObjectDescription.PACKAGE_KEY) + "." + description.getName());
			}
			
			protected StyledString getStyledDisplayString(EObject element, String qualifiedName, String shortName) {
				return new StyledString(getDisplayString(element, qualifiedName, shortName));
			}
		};
	}
	
    @Override
    public void completeImport_ImportedNamespace(EObject model, Assignment assignment, final ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        Set<Entry<String, Object>> packages = EPackage.Registry.INSTANCE.entrySet();
        EObject container = model.eContainer();
        IJavaProject project = packageSelector.getJavaProject(model);
        if (project != null) {
            List<String> alreadyImported = packageSelector.getAlreadyImported(container);
            List<EPackage> ePackages = packageSelector.getEPackages(packages);
            createImportProposals(context, acceptor, project, alreadyImported, ePackages);
        }
    }

    private void createImportProposals(final ContentAssistContext context, ICompletionProposalAcceptor acceptor, IJavaProject javaProject, List<String> alreadyImported, List<EPackage> ePackages) {
        List<EPackage> filteredEPackages = packageSelector.filterAccessibleEPackages(javaProject, ePackages);
        for (EPackage ePackage : filteredEPackages) {
            createImportProposals(context, acceptor, alreadyImported, ePackage);
        }
    }

    private void createImportProposals(final ContentAssistContext context, ICompletionProposalAcceptor acceptor, List<String> alreadyImported, EPackage ePackage) {
        String name = ePackage.getName() + ".*";
        if (!alreadyImported.contains(name)) {
            ConfigurableCompletionProposal proposal = (ConfigurableCompletionProposal) createCompletionProposal(name, context);
            String displayString = ePackage.getName() + " (" + ePackage.getNsURI() + ")";
            proposal.setDisplayString(displayString);
            acceptor.accept(proposal);
        }
    }
}
