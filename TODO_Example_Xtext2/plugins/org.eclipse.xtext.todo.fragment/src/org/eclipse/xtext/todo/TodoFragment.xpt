«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::GrammarUtil»
«EXTENSION org::eclipse::xtext::todo::TodoFragment»


«DEFINE generate FOR Grammar»
«FILE getHighlightingConfigurationName().asPath()+".java" SRC_GEN_UI-»
package «getHighlightingConfigurationName().toJavaPackage()»;

import org.eclipse.swt.SWT;
import org.eclipse.xtext.ui.editor.syntaxcoloring.DefaultHighlightingConfiguration;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfigurationAcceptor;
import org.eclipse.xtext.ui.editor.utils.TextStyle;

public class «getHighlightingConfigurationName().toSimpleName()» extends
		DefaultHighlightingConfiguration {

	public static final String TODO_STYLE = "TODO_STYLE";
	
	@Override
	public void configure(IHighlightingConfigurationAcceptor acceptor) {
		super.configure(acceptor);
		acceptor.acceptDefaultHighlighting(TODO_STYLE, TODO_STYLE, todoTextStyle());
	}
	
	public TextStyle todoTextStyle() {
		TextStyle textStyle = commentTextStyle().copy();
		textStyle.setStyle(SWT.BOLD);
		return textStyle;
	}
}
«ENDFILE»
«FILE getSemanticHighlightingCalculatorName().asPath()+".java" SRC_GEN_UI-»
package «getSemanticHighlightingCalculatorName().toJavaPackage()»;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.ILeafNode;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightedPositionAcceptor;
import org.eclipse.xtext.ui.editor.syntaxcoloring.ISemanticHighlightingCalculator;
import org.eclipse.xtext.todo.ITaskElementChecker;

import com.google.inject.Inject;

public class «getSemanticHighlightingCalculatorName().toSimpleName()» implements
		ISemanticHighlightingCalculator {

	@Inject
	private ITaskElementChecker objElementChecker;

	public void provideHighlightingFor(XtextResource resource,
			IHighlightedPositionAcceptor acceptor) {
		if (resource == null) {
			return;
		}
		EList<EObject> contents = resource.getContents();
		if (contents.size() == 0) {
			return;
		}
		EObject root = contents.get(0);
		highlightSemanticModel(NodeModelUtils.findActualNodeFor(root), acceptor);
	}

	protected void highlightSemanticModel(INode node,
			IHighlightedPositionAcceptor acceptor) {
		if (node instanceof ICompositeNode) {
			for (INode child : ((ICompositeNode) node).getChildren()) {
				highlightSemanticModel(child, acceptor);
			}
		} else if (node instanceof ILeafNode) {
			highlghtLeafNode((ILeafNode) node, acceptor);
		}
	}

	protected void highlghtLeafNode(ILeafNode node,
			IHighlightedPositionAcceptor acceptor) {
		EObject grammarElement = node.getGrammarElement();
		if (grammarElement instanceof Keyword) {
			ParserRule parserRule = EcoreUtil2.getContainerOfType(
					grammarElement, ParserRule.class);
			if ("XID".equals(parserRule.getName())) {
				applyDefaultStyle(node, acceptor);
			}
		}

		String varIgnorePrefix = objElementChecker.getPrefixToIgnore(node);
		if (varIgnorePrefix != null) {
			int start = node.getOffset()
					+ node.getText().indexOf(varIgnorePrefix);
			acceptor.addPosition(start, varIgnorePrefix.length(),
					«getHighlightingConfigurationName().toSimpleName()».TODO_STYLE);
		}
	}

	protected void applyDefaultStyle(ILeafNode node,
			IHighlightedPositionAcceptor acceptor) {
		acceptor.addPosition(node.getOffset(), node.getLength(),
				«getHighlightingConfigurationName().toSimpleName()».DEFAULT_ID);
	}
}
«ENDFILE»
«ENDDEFINE»


«DEFINE addToPluginXmlRt FOR Grammar-»«ENDDEFINE»


«DEFINE addToPluginXmlUi FOR Grammar-»
   <extension
         id="Xtask"
         name="Xtext-Task"
         point="org.eclipse.core.resources.markers">
      <super
            type="org.eclipse.core.resources.taskmarker">
      </super>
   </extension>
   <extension
         point="org.eclipse.ui.editors.annotationTypes">
      <type
            markerType="org.eclipse.xtext.todo.ui.Xtask"
            name="«getHighlightingConfigurationName().toJavaPackage()».XtaskAnnotation"
            super="org.eclipse.ui.workbench.texteditor.task">
      </type>
   </extension>
«ENDDEFINE»


«DEFINE addToStandaloneSetup FOR Grammar-»«ENDDEFINE»
