«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::GrammarUtil»
«EXTENSION org::eclipse::xtext::todo::TodoFragment»


«DEFINE generate FOR Grammar»
«FILE getHighlightingConfigurationName().asPath()+".java" SRC_GEN_UI-»
package «getHighlightingConfigurationName().toJavaPackage()»;

import org.eclipse.swt.SWT;
import org.eclipse.xtext.ui.editor.syntaxcoloring.DefaultHighlightingConfiguration;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingConfigurationAcceptor;
import org.eclipse.xtext.ui.editor.utils.TextStyle;

public class «getHighlightingConfigurationName().toSimpleName()» extends
		DefaultHighlightingConfiguration {

	public static final String TODO_STYLE = "TODO_STYLE";
	
	@Override
	public void configure(IHighlightingConfigurationAcceptor acceptor) {
		super.configure(acceptor);
		acceptor.acceptDefaultHighlighting(TODO_STYLE, TODO_STYLE, todoTextStyle());
	}
	
	public TextStyle todoTextStyle() {
		TextStyle textStyle = commentTextStyle().copy();
		textStyle.setStyle(SWT.BOLD);
		return textStyle;
	}
}
«ENDFILE»
«FILE getSemanticHighlightingCalculatorName().asPath()+".java" SRC_GEN_UI-»
package «getSemanticHighlightingCalculatorName().toJavaPackage()»;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.ILeafNode;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightedPositionAcceptor;
import org.eclipse.xtext.ui.editor.syntaxcoloring.ISemanticHighlightingCalculator;
import org.eclipse.xtext.todo.ITaskElementChecker;

import com.google.inject.Inject;

public class «getSemanticHighlightingCalculatorName().toSimpleName()» implements
		ISemanticHighlightingCalculator {

	@Inject
	private ITaskElementChecker objElementChecker;

	public void provideHighlightingFor(XtextResource resource,
			IHighlightedPositionAcceptor acceptor) {
		if (resource == null) {
			return;
		}
		EList<EObject> contents = resource.getContents();
		if (contents.size() == 0) {
			return;
		}
		EObject root = contents.get(0);
		highlightSemanticModel(NodeModelUtils.findActualNodeFor(root), acceptor);
	}

	protected void highlightSemanticModel(INode node,
			IHighlightedPositionAcceptor acceptor) {
		if (node instanceof ICompositeNode) {
			for (INode child : ((ICompositeNode) node).getChildren()) {
				highlightSemanticModel(child, acceptor);
			}
		} else if (node instanceof ILeafNode) {
			highlghtLeafNode((ILeafNode) node, acceptor);
		}
	}

	protected void highlghtLeafNode(ILeafNode node,
			IHighlightedPositionAcceptor acceptor) {
		EObject grammarElement = node.getGrammarElement();
		if (grammarElement instanceof Keyword) {
			ParserRule parserRule = EcoreUtil2.getContainerOfType(
					grammarElement, ParserRule.class);
			if ("XID".equals(parserRule.getName())) {
				applyDefaultStyle(node, acceptor);
			}
		}

		String varIgnorePrefix = objElementChecker.getPrefixToIgnore(node);
		if (varIgnorePrefix != null) {
			int start = node.getOffset()
					+ node.getText().indexOf(varIgnorePrefix);
			acceptor.addPosition(start, varIgnorePrefix.length(),
					«getHighlightingConfigurationName().toSimpleName()».TODO_STYLE);
		}
	}

	protected void applyDefaultStyle(ILeafNode node,
			IHighlightedPositionAcceptor acceptor) {
		acceptor.addPosition(node.getOffset(), node.getLength(),
				«getHighlightingConfigurationName().toSimpleName()».DEFAULT_ID);
	}
}
«ENDFILE»
«FILE getActivatorProviderName().asPath()+".java" SRC_GEN_UI-»
package «getActivatorProviderName().toJavaPackage()»;

import org.eclipse.xtext.todo.IActivatorProvider;
import org.eclipse.ui.plugin.AbstractUIPlugin;

public class «getActivatorProviderName().toSimpleName()» implements IActivatorProvider {

	public AbstractUIPlugin getActivator() {
		return «uiPackage(this)».internal.«toSimpleName(name)»Activator.getInstance(); 
	}
	
	public String getCompilerTaskTagsKey() {
		return «uiPackage(this)».internal.«toSimpleName(name)»Activator.«getId(this).toUpperCase().replaceAll('\\.', '_')» + ".compiler.taskTags"; //$NON-NLS-1$
	}
	
	public String getCompilerTaskPrioritiesKey() {
		return «uiPackage(this)».internal.«toSimpleName(name)»Activator.«getId(this).toUpperCase().replaceAll('\\.', '_')» + ".compiler.taskPriorities"; //$NON-NLS-1$
	}
	
	public String getCompilerTaskCaseSensitiveKey() {
		return «uiPackage(this)».internal.«toSimpleName(name)»Activator.«getId(this).toUpperCase().replaceAll('\\.', '_')» + ".compiler.taskCaseSensitive"; //$NON-NLS-1$
	}
}
«ENDFILE»
«FILE getTodoTaskInputDialogName().asPath()+".java" SRC_GEN_UI-»
package «getTodoTaskInputDialogName().toJavaPackage()»;

import java.util.List;

import org.eclipse.swt.widgets.Shell;
import org.eclipse.xtext.todo.ui.TodoTaskConfigurationBlock.TodoTask;
import org.eclipse.xtext.todo.ui.TodoTaskInputDialog;

public class «getTodoTaskInputDialogName().toSimpleName()» extends TodoTaskInputDialog {

	public «getTodoTaskInputDialogName().toSimpleName()»(Shell parent, TodoTask task,
			List<TodoTask> existingEntries) {
		super(parent, task, existingEntries);
	}

	@Override
	protected String getPrefix() {
		return «uiPackage(this)».internal.«toSimpleName(name)»Activator.«getId(this).toUpperCase().replaceAll('\\.', '_')» + '.';
	}
}
«ENDFILE»
«FILE getTodoTaskConfigurationBlockName().asPath()+".java" SRC_GEN_UI-»
package «getTodoTaskInputDialogName().toJavaPackage()»;

import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.preferences.IWorkbenchPreferenceContainer;
import org.eclipse.xtext.todo.ui.IStatusChangeListener;
import org.eclipse.xtext.todo.ui.TodoTaskConfigurationBlock;
import org.eclipse.xtext.todo.ui.TodoTaskInputDialog;

public class «getTodoTaskConfigurationBlockName().toSimpleName()» extends TodoTaskConfigurationBlock {

	public static final String COMPILER_TASK_TAGS = «uiPackage(this)».internal.«toSimpleName(name)»Activator.«getId(this).toUpperCase().replaceAll('\\.', '_')» + ".compiler.taskTags"; //$NON-NLS-1$
	public static final String COMPILER_TASK_PRIORITIES = «uiPackage(this)».internal.«toSimpleName(name)»Activator.«getId(this).toUpperCase().replaceAll('\\.', '_')» + ".compiler.taskPriorities"; //$NON-NLS-1$
	public static final String COMPILER_TASK_CASE_SENSITIVE = «uiPackage(this)».internal.«toSimpleName(name)»Activator.«getId(this).toUpperCase().replaceAll('\\.', '_')» + ".compiler.taskCaseSensitive"; //$NON-NLS-1$

	private static final Key PREF_COMPILER_TASK_TAGS= getJDTCoreKey(COMPILER_TASK_TAGS);
	private static final Key PREF_COMPILER_TASK_PRIORITIES= getJDTCoreKey(COMPILER_TASK_PRIORITIES);

	private static final Key PREF_COMPILER_TASK_CASE_SENSITIVE= getJDTCoreKey(COMPILER_TASK_CASE_SENSITIVE);

	public «getTodoTaskConfigurationBlockName().toSimpleName()»(IStatusChangeListener context,
			IProject project, IWorkbenchPreferenceContainer container) {
		super(context, project, getKeys(), container);
	}
	
	private static Key[] getKeys() {
		return new Key[] {
			PREF_COMPILER_TASK_TAGS, PREF_COMPILER_TASK_PRIORITIES, PREF_COMPILER_TASK_CASE_SENSITIVE
		};
	}

	@Override
	protected TodoTaskInputDialog getTodoTaskInputDialog(Shell parent,
			TodoTask task, List<TodoTask> existingEntries) {
		return new «getTodoTaskInputDialogName().toSimpleName()»(parent, task, existingEntries);
	}
	
	protected String getCompilerTaskTagsKey() {
		return COMPILER_TASK_TAGS;
	}
	
	protected String getCompilerTaskPrioritiesKey() {
		return COMPILER_TASK_PRIORITIES;
	}
	
	protected String getCompilerTaskCaseSensitiveKey() {
		return COMPILER_TASK_CASE_SENSITIVE;
	}
}
«ENDFILE»
«FILE getTodoTaskPreferencePageName().asPath()+".java" SRC_GEN_UI-»
package «getTodoTaskPreferencePageName().toJavaPackage()»;

import org.eclipse.core.resources.IProject;
import org.eclipse.ui.preferences.IWorkbenchPreferenceContainer;
import org.eclipse.xtext.todo.ui.IStatusChangeListener;
import org.eclipse.xtext.todo.ui.TodoTaskConfigurationBlock;
import org.eclipse.xtext.todo.ui.TodoTaskPreferencePage;

public class «getTodoTaskPreferencePageName().toSimpleName()» extends TodoTaskPreferencePage {

	@Override
	protected String getPrefix() {
		return «uiPackage(this)».internal.«toSimpleName(name)»Activator.«getId(this).toUpperCase().replaceAll('\\.', '_')» + '.';
	}

	@Override
	protected TodoTaskConfigurationBlock getTodoTaskConfigurationBlock(
			IStatusChangeListener context, IProject project,
			IWorkbenchPreferenceContainer container) {
		return new «getTodoTaskConfigurationBlockName().toSimpleName()»(context, project, container);
	}
}
«ENDFILE»
«ENDDEFINE»


«DEFINE addToPluginXmlRt FOR Grammar-»«ENDDEFINE»


«DEFINE addToPluginXmlUi FOR Grammar-»
   <extension
         id="Xtask"
         name="Xtext-Task"
         point="org.eclipse.core.resources.markers">
      <super
            type="org.eclipse.core.resources.taskmarker">
      </super>
	  <persistent value="true"/>
   </extension>
   <extension
         point="org.eclipse.ui.editors.annotationTypes">
      <type
            markerType="org.eclipse.xtext.todo.ui.Xtask"
            name="«getHighlightingConfigurationName().toJavaPackage()».XtaskAnnotation"
            super="org.eclipse.ui.workbench.texteditor.task">
      </type>
   </extension>
   <extension
         point="org.eclipse.xtext.builder.participant">
      <participant
            class="«uiPackage(this)».«toSimpleName(name)»ExecutableExtensionFactory:org.eclipse.xtext.todo.XtextTaskCalculator">
      </participant>
   </extension>   
   <extension
         point="org.eclipse.ui.propertyPages">
      <page
            category="«name».compiler.propertyPage"
            class="«getTodoTaskPreferencePageName()»"
            id="«uiPackage(this)».todo.propertyPages.TodoTaskPreferencePage"
            name="Task Tags">
         <enabledWhen>
		     <adapt type="org.eclipse.core.resources.IProject">
		          <test property="org.eclipse.core.resources.projectNature" value="org.eclipse.xtext.ui.shared.xtextNature"/>
		     </adapt>         
         </enabledWhen>
         <keywordReference id="«uiPackage(this)».keyword_«toSimpleName(name)»"/>
      </page>
   </extension>   
   <extension
         point="org.eclipse.ui.preferencePages">
      <page
            name="Task Tags"
            category="«name».compiler.preferencePage"
            class="«getTodoTaskPreferencePageName()»"
            id="«uiPackage(this)».todo.preferences.TodoTaskPreferencePage">
         <keywordReference id="«uiPackage(this)».keyword_«toSimpleName(name)»"/>
      </page>
   </extension>
«ENDDEFINE»


«DEFINE addToStandaloneSetup FOR Grammar-»«ENDDEFINE»
