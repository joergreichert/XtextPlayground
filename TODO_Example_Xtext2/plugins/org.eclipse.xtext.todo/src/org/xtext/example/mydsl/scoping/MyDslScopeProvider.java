/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.scoping;

import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;

import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.FeatureReference;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.Referencable;
import org.xtext.example.mydsl.myDsl.Reference;
import org.xtext.example.mydsl.myDsl.ReferenceChain;
import org.xtext.example.mydsl.myDsl.ReferenceExpression;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class MyDslScopeProvider extends AbstractDeclarativeScopeProvider {
	private PackageSelector packageSelector;
	
	public MyDslScopeProvider() {
		packageSelector = new PackageSelector();
	}

	public IScope scope_ReferenceChain_target(ReferenceChain chain,
			EReference ref) {
		ReferenceExpression source = chain.getSource();
		Referencable previous = null;
		if (source instanceof ReferenceChain) {
			ReferenceChain referenceChain = (ReferenceChain) source;
			previous = referenceChain.getTarget();
		} else if (source instanceof Reference) {
			Reference reference = (Reference) source;
			previous = reference.getElement();
		}
		IScope scope = IScope.NULLSCOPE;
		if (previous instanceof Entity) {
			Entity entity = (Entity) previous;
			scope = Scopes.scopeFor(entity.getFeatures());
		} else if (previous instanceof FeatureReference) {
			FeatureReference featureReference = (FeatureReference) previous;
			Referencable type = featureReference.getType();
			if (type instanceof Entity) {
				Entity entity = (Entity) type;
				scope = Scopes.scopeFor(entity.getFeatures());
			}
		}
		return scope;
	}

	protected IScope delegateGetScope(EObject context, EReference reference) {
		if (context instanceof FeatureReference && "mapsTo".equals(reference.getName())) {
			return scope_FeatureReference_mapsTo((FeatureReference) context, reference);
		} else if (context instanceof Entity && "mapsTo".equals(reference.getName())) {
			return scope_Entity_mapsTo((Entity) context, reference);
		}
		return super.delegateGetScope(context, reference);
	}
	
	public IScope scope_Entity_mapsTo(Entity entity, EReference ref) {
		Set<Entry<String, Object>> packages = EPackage.Registry.INSTANCE
				.entrySet();
		List<EPackage> ePackages = packageSelector.getFilteredEPackages(entity, packages);
		List<String> alreadyImported = packageSelector.getAlreadyImportedForElement(entity);
		Set<EClassifier> eClassifiers = new HashSet<EClassifier>();
		String name;
		for (EPackage pack : ePackages) {
			name = pack.getName() + ".*";
			if (alreadyImported.contains(name)) {
				iteratePackage(pack, eClassifiers);
			}
		}
		return Scopes.scopeFor(eClassifiers);
	}

	// Uses EPackage Registry and loaded EObjects
	public IScope scope_FeatureReference_mapsTo(FeatureReference featureReference, EReference ref) {
		Set<Entry<String, Object>> packages = EPackage.Registry.INSTANCE
				.entrySet();
		Entity entity = (Entity) featureReference.eContainer();
		EClassifier mapsTo = entity.getMapsTo();
		Set<EClassifier> eClassifiers = new HashSet<EClassifier>();
		if(mapsTo == null) {
			List<EPackage> ePackages = packageSelector.getFilteredEPackages(featureReference, packages);
			List<String> alreadyImported = packageSelector.getAlreadyImportedForElement(featureReference);
			String name;
			for (EPackage pack : ePackages) {
				name = pack.getName() + ".*";
		        if (alreadyImported.contains(name)) {
		        	iteratePackage(pack, eClassifiers);
		        }
			}
		} else {
			for(EReference r : mapsTo.eClass().getEAllReferences()) {
				eClassifiers.add(r.getEType());
			}
		}
		return Scopes.scopeFor(eClassifiers);
	}
	
	public void iteratePackage(EPackage pack, Set<EClassifier> eClassifiers) {
		List<EObject> contents = pack.eContents();
		for (EObject o : contents) {
			if (o instanceof EClassifier) {
				eClassifiers.add((EClassifier) o);
			} else if (o instanceof EPackage) {
				iteratePackage((EPackage) o, eClassifiers);
			}
		}
	}
}
